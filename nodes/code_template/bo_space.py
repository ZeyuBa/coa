#Please Write a AutoMLSpace class that has 3 major functions
import pandas as pd
from hebo.design_space.design_space import DesignSpace
import numpy as np
class AutoMLSpace:
    def __init__(self,space_list):
        self.space_list=space_list
        self._create_search_space()

    def _create_search_space(self):
        """Parse the space list to design space"""
        self.space=DesignSpace().parse(self.space_list)

    def sample_point(self):
        """Return a random sample of space"""
        return self.space.sample()

    def decode_sample(self, sample: pd.DataFrame,func_name:str):
        """

        Explanation:  Arrange the sample to param_dict as the input to given func {func_name}.if params are not defined in sample, you should fill with ''
        Parameters:
        sample: hyperparameter sample generated by BO.
        func_name: decoded sample will be applied to {func_name}
        Returns:
        param_dict_list(dict): the list of argument dict of {func_name}.
        """

        pass
if __name__=='__main__':
    func_name=''
    exec(f'from {func_name} import {func_name}')
    """
    Test all the methods in AutoMLSpace.
    Test the {func_name} with decode_sample result as input
    """

    