
import pandas as pd
from hebo.design_space.design_space import DesignSpace
import inspect
class AutoMLSpace:
    def __init__(self, space_list):
        self.space_list = space_list
        self._create_search_space()

    def _create_search_space(self):
        """Parse the space list to design space"""
        self.space = DesignSpace().parse(self.space_list)

    def sample_point(self):
        """Return a random sample of space"""
        return self.space.sample()

    def decode_sample(self, sample: pd.DataFrame, func_name: str,expected_args:list[str]):
        """
        Explanation:  Arrange the sample to param_dict as the input to given func {func_name}.if params are not defined in sample, you should fill with ''
        Parameters:
        sample: hyperparameter sample generated by BO.
        func_name: decoded sample will be applied to {func_name}
        Returns:
        param_dict_list(dict): the list of argument dict of {func_name}.
        
        Note: func_name: feat_encoder. Expected arguments are: ['data', 'feature_name', 'threshold', 'method']. 
            Input args example:{'data': 'train', 'feature_name': 'AgeInDays', 'threshold': 30, 'method': 'clip'}
        """

        param_dict_list = []
        result_list=[]
        row=list(sample.iterrows())[0][1]
        param_dict_list={}
        for col in sample.columns:
            parts = col.split('_')
            feature_name = parts[0]  # Join all parts except the last as feature name
            param_dict = param_dict_list.get(feature_name,{}.fromkeys(expected_args,''))
            param_dict['feature_name']=feature_name
            param_dict_list[feature_name]=param_dict
            attribute = parts[-1]  # The last part of the split is the attribute
            if feature_name in param_dict_list:
                param_dict[attribute]=row[col]
            param_dict_list[feature_name]=param_dict

        return list(param_dict_list.values())


if __name__ == '__main__':
    from feat_encoder import feat_encoder

    func_name = 'feat_encoder'
    exec(f'from {func_name} import {func_name}')
    space_list = [{'name': 'AgeInDays_threshold', 'type': 'cat', 'categories': [30, 60]}, {'name': 'AgeInDays_method', 'type': 'cat', 'categories': ['clip', 'bool']}, {'name': 'SuperplasticizerComponent_threshold', 'type': 'cat', 'categories': [1.5, 2.0]}, {'name': 'SuperplasticizerComponent_method', 'type': 'cat', 'categories': ['clip', 'bool']}, {'name': 'FlyAshComponent_data', 'type': 'cat', 'categories': ['train']}, {'name': 'FlyAshComponent_threshold', 'type': 'cat', 'categories': [1.3, 0.1]}, {'name': 'FlyAshComponent_method', 'type': 'cat', 'categories': ['clip', 'bool']}]
    sp = AutoMLSpace(space_list)
    sample = sp.sample_point()
    print(sample.columns)
    print(sp.decode_sample(sample,func_name))

